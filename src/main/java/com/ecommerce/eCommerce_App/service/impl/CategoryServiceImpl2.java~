package com.ecommerce.eCommerce_App.service.impl;

import com.ecommerce.eCommerce_App.model.enums.EntityType;
import com.ecommerce.eCommerce_App.model.mapper.ImageMapper;
import com.ecommerce.eCommerce_App.repository.ImageRepo;
import com.ecommerce.eCommerce_App.service.CategoryService;
import com.ecommerce.eCommerce_App.service.ImageService;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class ImageServiceImpl implements ImageService {

    private final ImageRepo imageRepo;
    private final ImageMapper imageMapper;

    @Value("${upload.images.dir}") // Inject value from properties file
    private String UPLOAD_IMAGE_DIR;

    private static final List<String> ALLOWED_IMAGE_TYPES = List.of("image/png", "image/jpeg");

    @Override
    public Image add(MultipartFile imageFile, Long entityId, EntityType entityType) {
        validateImageFile(imageFile);

        String uniqueFileName = generateUniqueFileName(imageFile.getOriginalFilename());
        Path filePath = Paths.get(UPLOAD_IMAGE_DIR, uniqueFileName);

        saveFileToDisk(imageFile, filePath);

        Image image = new Image();
        image.setImageName(imageFile.getOriginalFilename());
        image.setImageType(imageFile.getContentType());
        image.setStoragePath(filePath.toString());
        image.setEntityId(entityId);
        image.setEntityType(entityType);
        image.setUniqueFileName(uniqueFileName);

        return imageRepo.save(image);
    }

    @Override
    @Transactional
    public Image update(Long imageId, MultipartFile newImageFile) {
        validateImageFile(newImageFile);

        Image existingImage = getById(imageId);
        String uniqueFileName = generateUniqueFileName(newImageFile.getOriginalFilename());
        Path newFilePath = Paths.get(UPLOAD_IMAGE_DIR, uniqueFileName);

        saveFileToDisk(newImageFile, newFilePath);

        // Delete the old file only after the new file is successfully saved
        deleteFileFromDisk(existingImage.getStoragePath());

        // Update the existing image details
        existingImage.setImageName(newImageFile.getOriginalFilename());
        existingImage.setImageType(newImageFile.getContentType());
        existingImage.setStoragePath(newFilePath.toString());
        existingImage.setUniqueFileName(uniqueFileName);

        return imageRepo.save(existingImage);
    }

    @Override
    @Transactional
    public List<Image> update(Long entityId, EntityType entityType, List<MultipartFile> newImageFiles) {
        if (newImageFiles == null || newImageFiles.isEmpty()) {
            throw new IllegalArgumentException("New image files must not be null or empty.");
        }

        // Fetch existing images for the entity
        List<Image> existingImages = getAllByEntityIdAndEntityType(entityId, entityType);

        // Add new images
        List<Image> updatedImages = newImageFiles.stream()
                .map(imageFile -> add(imageFile, entityId, entityType))
                .collect(Collectors.toList());

        // Delete old images only after new images are successfully added
        existingImages.forEach(this::deleteImage);

        return updatedImages;
    }

    @Override
    @Transactional
    public void deleteById(Long id) {
        Image image = getById(id);
        deleteImage(image);
    }

    @Override
    @Transactional
    public void deleteAllByEntityIdAndEntityType(Long entityId, EntityType entityType) {
        List<Image> images = getAllByEntityIdAndEntityType(entityId, entityType);
        images.forEach(this::deleteImage);
    }

    @Override
    public Optional<Image> getOptionalById(Long id) {
        return imageRepo.findById(id);
    }

    @Override
    public Image getById(Long id) {
        return getOptionalById(id).orElseThrow(
                () -> new NoSuchElementException("Image not found!")
        );
    }

    @Override
    public Optional<Image> getOptionalByEntityIdAndEntityType(Long entityId, EntityType entityType) {
        return imageRepo.findByEntityIdAndEntityType(entityId, entityType);
    }

    @Override
    public Image getByEntityIdAndEntityType(Long entityId, EntityType entityType) {
        return getOptionalByEntityIdAndEntityType(entityId, entityType).orElseThrow(
                () -> new NoSuchElementException("Image not found!")
        );
    }

    @Override
    public List<Image> getAllByEntityIdAndEntityType(Long entityId, EntityType entityType) {
        return imageRepo.findAllByEntityIdAndEntityType(entityId, entityType);
    }

    // Helper Methods

    private void validateImageFile(MultipartFile imageFile) {
        if (imageFile == null || imageFile.isEmpty()) {
            throw new IllegalArgumentException("Image file must not be empty.");
        }

        if (!ALLOWED_IMAGE_TYPES.contains(imageFile.getContentType())) {
            throw new IllegalArgumentException("Invalid image type. Allowed types are: " + ALLOWED_IMAGE_TYPES);
        }
    }

    private String generateUniqueFileName(String originalFileName) {
        return UUID.randomUUID() + "_" + originalFileName;
    }

    private void saveFileToDisk(MultipartFile file, Path filePath) {
        try {
            Files.createDirectories(filePath.getParent());
            Files.write(filePath, file.getBytes());
        } catch (IOException e) {
            throw new RuntimeException("Failed to store image file", e);
        }
    }

    private void deleteFileFromDisk(String filePath) {
        try {
            Files.deleteIfExists(Paths.get(filePath));
        } catch (IOException e) {
            throw new RuntimeException("Failed to delete image file", e);
        }
    }

    private void deleteImage(Image image) {
        deleteFileFromDisk(image.getStoragePath());
        imageRepo.delete(image);
    }
}